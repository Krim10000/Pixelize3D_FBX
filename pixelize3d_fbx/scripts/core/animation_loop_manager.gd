# scripts/core/animation_loop_manager.gd
# Script completamente SINCR√ìNICO para manejar loops y cambios de animaci√≥n
# Input: AnimationPlayer con animaciones
# Output: Control correcto de loops y cambios de animaci√≥n SIN await

# scripts/core/animation_loop_manager.gd
# Administrador de reproducci√≥n de animaciones con bucles seguros

extends Node
class_name AnimationLoopManager

# === FUNCIONES P√öBLICAS ===

func change_animation_clean(animation_player: AnimationPlayer, animation_name: String) -> bool:
	"""
	Reproduce una animaci√≥n limpiamente en bucle.
	Detiene la anterior y asegura loop.
	"""
	if not animation_player:
		push_error("‚ùå [LoopManager] AnimationPlayer nulo")
		return false
	
	if not animation_player.has_animation(animation_name):
		push_error("‚ùå [LoopManager] Animaci√≥n '%s' no encontrada" % animation_name)
		return false
	
	# Detener animaci√≥n actual
	if animation_player.is_playing():
		print("‚èπÔ∏è [LoopManager] Deteniendo animaci√≥n actual: %s" % animation_player.current_animation)
		animation_player.stop()
	
	# Configurar loop en la animaci√≥n
	var anim = animation_player.get_animation(animation_name)
	if anim:
		anim.loop_mode = Animation.LOOP_LINEAR  # ‚ùó Usa LOOP_LINEAR en Godot 4
	
	# Reproducir desde el inicio con mezcla
	animation_player.play(animation_name, -1.0, 0.2)
	print("‚ñ∂Ô∏è [LoopManager] Reproduciendo animaci√≥n limpia: %s" % animation_name)
	return true

func stop_animation_clean(animation_player: AnimationPlayer) -> void:
	"""
	Detiene por completo la animaci√≥n actual.
	"""
	if animation_player and animation_player.is_playing():
		print("üõë [LoopManager] Deteniendo animaci√≥n: %s" % animation_player.current_animation)
		animation_player.stop()

func setup_infinite_loops(animation_player: AnimationPlayer) -> void:
	"""
	Establece todas las animaciones del AnimationPlayer como loops infinitos.
	"""
	if not animation_player:
		return
	
	for ani_name in animation_player.get_animation_list():
		var anim = animation_player.get_animation(ani_name)
		if anim:
			anim.loop_mode = Animation.LOOP_LINEAR  # ‚ùó LOOP_LINEAR es el modo est√°ndar

func toggle_pause_with_loop(animation_player: AnimationPlayer) -> bool:
	"""
	Pausa o reanuda la animaci√≥n manteniendo el loop.
	Retorna true si est√° reproduciendo despu√©s del cambio.
	"""
	if not animation_player:
		return false
	
	if animation_player.is_playing():
		animation_player.pause()
		print("‚è∏Ô∏è [LoopManager] Animaci√≥n pausada")
		return false
	else:
		animation_player.play()
		print("‚ñ∂Ô∏è [LoopManager] Animaci√≥n reanudada")
		return true
